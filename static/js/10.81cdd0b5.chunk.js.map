{"version":3,"sources":["Components/genre/PageIndicator.jsx","Pages/SearchResults.jsx"],"names":["PageIndicator","numberOfPages","handleChange","currentPageNumber","items","usePagination","count","onChange","hideNextButton","hidePrevButton","Container","map","index","page","type","item","PageNumber","key","isActive","Number","styled","div","Button","p","css","theme","primary","rgba","Header","GenreName","h1","SearchResults","dispatch","useDispatch","history","useHistory","search","useLocation","queryString","parse","searchTerm","isLoading","useSelector","searchIsLoadingSelector","searchCollectionSelector","movies","tvSeries","useTitle","useEffect","fetchSearch","error","searchErrorSelector","_","push","length","header","sectionName","collection"],"mappings":"6UAMe,SAASA,EAAT,GAIX,IAHFC,EAGC,EAHDA,cACAC,EAEC,EAFDA,aACAC,EACC,EADDA,kBAEQC,EAAUC,YAAc,CAC9BC,MAAOL,EACPM,SAAUL,EACVM,gBAAgB,EAChBC,gBAAgB,IAJVL,MAOR,OACE,kBAACM,EAAD,KACGN,EAAMO,KAAI,WAA0BC,GAAW,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,KAASC,EAAkB,+BAiB7C,MAda,mBAATD,GAAsC,iBAATA,EACpB,SAGT,kBAACE,EAAD,eACEC,IAAKJ,EACLK,SAAUC,OAAOhB,KAAuBU,GACpCE,GAEHF,OAWf,IAAMH,EAAYU,IAAOC,IAAV,+EAAGD,CAAH,sGAQTJ,EAAaI,YAAOE,KAAV,gFAAGF,CAAH,iDACZ,SAACG,GAAD,OACAA,EAAEL,UACFM,YADA,KAEgB,SAACD,GAAD,OAAOA,EAAEE,MAAMC,cAOjB,SAACH,GAAD,OAAOI,YAAKJ,EAAEE,MAAMC,QAAS,Q,iKCc/C,IAAME,EAASR,IAAOC,IAAV,wEAAGD,CAAH,oHAQNS,EAAYT,IAAOU,GAAV,2EAAGV,CAAH,oGAQAW,UAzEf,WACE,IAAMC,EAAWC,cACXC,EAAUC,cACRC,EAAWC,cAAXD,OAHe,EAIME,IAAYC,MAAMH,GAAvCvB,EAJe,EAIfA,KAAM2B,EAJS,EAITA,WAERC,EAAYC,YAAYC,KANP,EAOqBD,YAC1CE,KADMC,EAPe,EAOfA,OAAQC,EAPO,EAOPA,SAAU7C,EAPH,EAOGA,cAG1B8C,YAAS,WAAD,OAAYP,EAAZ,MACRQ,qBAAU,WACRhB,EAASiB,YAAY,CAAET,aAAY3B,YAClC,CAACmB,EAAUQ,EAAY3B,IAE1B,IAGMqC,EAAQR,YAAYS,KAC1B,OAAID,EACK,kBAAC,IAAD,KAAaA,GAIpB,kBAAC,IAAD,KACE,kBAACtB,EAAD,KACE,kBAACC,EAAD,KACGY,EAAY,kBAAC,IAAD,MAAH,uBAA0CD,EAA1C,MAEZ,kBAAC,IAAD,CACEtC,aAfa,SAACkD,EAAGvC,GAAJ,OACnBqB,EAAQmB,KAAR,kCAAwCb,EAAxC,iBAA2D3B,KAerDZ,cAAeA,EACfE,kBAAmBU,KAIJ,IAAlBgC,EAAOS,QACN,oCACE,kBAAC,IAAD,CACEC,OAAQ,CACNC,YAAa,UAEfC,WAAYZ,IAGd,kBAAC,IAAD,CACEU,OAAQ,CACNC,YAAa,aAEfC,WAAYX","file":"static/js/10.81cdd0b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { usePagination } from '@material-ui/lab/Pagination';\r\nimport styled, { css } from 'styled-components/macro';\r\nimport Button from 'Components/ui/Button';\r\nimport { rgba } from 'polished';\r\n\r\nexport default function PageIndicator({\r\n  numberOfPages,\r\n  handleChange,\r\n  currentPageNumber,\r\n}) {\r\n  const { items } = usePagination({\r\n    count: numberOfPages,\r\n    onChange: handleChange,\r\n    hideNextButton: true,\r\n    hidePrevButton: true,\r\n  });\r\n\r\n  return (\r\n    <Container>\r\n      {items.map(({ page, type, ...item }, index) => {\r\n        let children = null;\r\n\r\n        if (type === 'start-ellipsis' || type === 'end-ellipsis') {\r\n          children = 'â€¦';\r\n        } else {\r\n          children = (\r\n            <PageNumber\r\n              key={page}\r\n              isActive={Number(currentPageNumber) === page}\r\n              {...item}\r\n            >\r\n              {page}\r\n            </PageNumber>\r\n          );\r\n        }\r\n\r\n        return children;\r\n      })}\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-self: flex-start;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: larger;\r\n`;\r\n\r\nconst PageNumber = styled(Button)`\r\n  ${(p) =>\r\n    p.isActive &&\r\n    css`\r\n      background: ${(p) => p.theme.primary};\r\n      font-weight: bold;\r\n    `}\r\n\r\n  margin: 0 1.5vw;\r\n\r\n  &:hover {\r\n    background: ${(p) => rgba(p.theme.primary, 0.5)};\r\n  }\r\n`;\r\n","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\nimport queryString from 'query-string';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport MainLayout from 'HOC/MainLayout';\r\nimport Collection from 'Components/moviePage/Collection/Collection';\r\n\r\nimport PageIndicator from 'Components/genre/PageIndicator';\r\nimport {\r\n  searchIsLoadingSelector,\r\n  searchCollectionSelector,\r\n  fetchSearch,\r\n  searchErrorSelector,\r\n} from 'Features/searchSlice';\r\nimport LoadingIndicator from 'Components/ui/LoadingIndicator/LoadingIndicator';\r\nimport useTitle from 'Hooks/useTitle';\r\nimport ErrorModal from 'Components/ui/ErrorModal';\r\n\r\nfunction SearchResults() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { search } = useLocation();\r\n  const { page, searchTerm } = queryString.parse(search);\r\n\r\n  const isLoading = useSelector(searchIsLoadingSelector);\r\n  const { movies, tvSeries, numberOfPages } = useSelector(\r\n    searchCollectionSelector\r\n  );\r\n  useTitle(`Search \"${searchTerm}\"`);\r\n  useEffect(() => {\r\n    dispatch(fetchSearch({ searchTerm, page }));\r\n  }, [dispatch, searchTerm, page]);\r\n\r\n  const handleChange = (_, page) =>\r\n    history.push(`/tmdb/search?searchTerm=${searchTerm}&page=${page}`);\r\n\r\n  const error = useSelector(searchErrorSelector);\r\n  if (error) {\r\n    return <ErrorModal>{error}</ErrorModal>;\r\n  }\r\n\r\n  return (\r\n    <MainLayout>\r\n      <Header>\r\n        <GenreName>\r\n          {isLoading ? <LoadingIndicator /> : `Results for \"${searchTerm}\"`}\r\n        </GenreName>\r\n        <PageIndicator\r\n          handleChange={handleChange}\r\n          numberOfPages={numberOfPages}\r\n          currentPageNumber={page}\r\n        />\r\n      </Header>\r\n\r\n      {movies.length !== 0 && (\r\n        <>\r\n          <Collection\r\n            header={{\r\n              sectionName: 'Movies',\r\n            }}\r\n            collection={movies}\r\n          />\r\n\r\n          <Collection\r\n            header={{\r\n              sectionName: 'TV Series',\r\n            }}\r\n            collection={tvSeries}\r\n          />\r\n        </>\r\n      )}\r\n    </MainLayout>\r\n  );\r\n}\r\n\r\nconst Header = styled.div`\r\n  display: grid;\r\n  grid-template-areas:\r\n    'genreName      genreName'\r\n    'pageIndicator  filter';\r\n  row-gap: 2rem;\r\n  padding: 1rem;\r\n`;\r\nconst GenreName = styled.h1`\r\n  grid-area: genreName;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: xx-large;\r\n`;\r\n\r\nexport default SearchResults;\r\n"],"sourceRoot":""}