{"version":3,"sources":["Context/SliderContext.js","Components/moviePage/nowPlayingSlider/NowPlayingSlide.jsx","Components/moviePage/nowPlayingSlider/NowPlayingSlideContent.jsx","Components/moviePage/nowPlayingSlider/Arrow.jsx","Components/moviePage/nowPlayingSlider/DotIndicator.jsx","Components/moviePage/nowPlayingSlider/NowPlayingSlider.jsx","Context/ItemContext.js","Pages/MoviePage.jsx","Hooks/useFetch.js"],"names":["React","createContext","pauseSlideShow","resumeSlideShow","NowPlayingSlide","item","useState","showInfo","setShowInfo","sliderControllers","useContext","SliderContext","StyledSlide","src","backdrop_path","InfoButton","onClick","PopupContainer","handleClick","initial","opacity","y","x","scale","animate","exit","transition","duration","overview","slice","styled","div","p","theme","white","CollectionItemInfo","breakpoints","md","MdInfoOutline","rgba","primary","StyledSlideContent","width","translateX","NowPlayingSlideContent","movies","slideContentWidth","window","innerWidth","length","map","movie","key","id","renderedMovies","StyledArrowContainer","isLeftArrow","css","withTheme","arrowConfig","size","color","DotsContainer","Flex","Dot","isActive","DotIndicator","activeIdx","handleDotClick","idx","title","StyledSlider","initCurrentSlide","index","transitionValue","lastMovieIndex","currentSlideReducer","state","type","payload","clearInterval","autoPlayTimer","_getTransitionValue","Error","slideIdx","NowPlayingSlider","autoPlayInMs","useReducer","currentSlide","dispatchCurrentSlide","useRef","useEffect","current","setInterval","console","log","Provider","value","activeSlide","MoviePageContainer","motion","extractSubCollection","collection","Object","keys","sort","MoviePage","fetchAction","valueSelector","isLoadingSelector","dispatch","useDispatch","useSelector","isLoading","useFetch","fetchCollection","collectionsSelector","collectionIsLoadingSelector","tvSeries","MOVIE_MENUS","TV_MENUS","activeMovieCollection","setActiveMovieCollection","activeTvCollection","setActiveTvCollection","useTitle","error","collectionErrorSelector","ErrorModal","LoadingIndicator","MainLayout","nowPlaying","ItemContext","Collection","header","sectionName","subMenuNames","activeMenu","setActiveMenu"],"mappings":"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","file":"static/js/12.7d3fb8c2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default React.createContext({\r\n  pauseSlideShow: () => {},\r\n  resumeSlideShow: () => {},\r\n});\r\n","/* --------------------------------- IMPORT --------------------------------- */\r\nimport styled from 'styled-components/macro';\r\nimport React, { useState, useContext } from 'react';\r\nimport { rgba } from 'polished';\r\nimport { MdInfoOutline } from 'react-icons/md';\r\nimport { AnimatePresence } from 'framer-motion';\r\n\r\nimport CollectionItemInfo from '../Collection/CollectionItemInfo';\r\nimport SliderContext from 'Context/SliderContext';\r\n\r\n/* -------------------------------- COMPONENT ------------------------------- */\r\nfunction NowPlayingSlide({ item }) {\r\n  const [showInfo, setShowInfo] = useState(false);\r\n  const sliderControllers = useContext(SliderContext);\r\n\r\n  const handleInfoClicked = () => {\r\n    setShowInfo(true);\r\n    sliderControllers.pauseSlideShow()();\r\n  };\r\n\r\n  const handlePopupClicked = () => {\r\n    setShowInfo(false);\r\n    sliderControllers.resumeSlideShow();\r\n  };\r\n\r\n  return (\r\n    <StyledSlide src={item.backdrop_path}>\r\n      {!showInfo && <InfoButton onClick={handleInfoClicked} />}\r\n\r\n      <AnimatePresence>\r\n        {showInfo && (\r\n          <PopupContainer\r\n            item={item}\r\n            handleClick={handlePopupClicked}\r\n            //\r\n            initial={{ opacity: 0, y: '-50%', x: '-50%', scale: 0 }}\r\n            animate={{ opacity: 1, y: '-50%', x: '-50%', scale: 1 }}\r\n            exit={{ opacity: 0, y: '-50%', x: '-50%', scale: 0 }}\r\n            transition={{ duration: 0.2 }}\r\n          >\r\n            {item.overview.slice(0, 200) + '...'}\r\n          </PopupContainer>\r\n        )}\r\n      </AnimatePresence>\r\n    </StyledSlide>\r\n  );\r\n}\r\n\r\nexport default NowPlayingSlide;\r\n\r\n// NOTE renders one Slide for the Slider\r\nconst StyledSlide = styled.div`\r\n  position: relative;\r\n\r\n  color: ${(p) => p.theme.white};\r\n  font-size: 1.5rem;\r\n\r\n  background-image: url(${(p) => p.src});\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  width: 100vw;\r\n  height: 100vmin;\r\n`;\r\n\r\n// NOTE restyled the Container for large item, added style on medium screen and up\r\nconst PopupContainer = styled(CollectionItemInfo)`\r\n  top: 50%;\r\n  left: 50%;\r\n  font-size: min(4vw, 2rem);\r\n\r\n  /* Framer already does this  */\r\n  /* transform: translate(-50%, -50%); */\r\n\r\n  /* Avoid setting padding because padding is set in the original Component  */\r\n  & > *:last-child {\r\n    margin-bottom: 5%;\r\n  }\r\n  & > *:first-child {\r\n    margin-top: 10%;\r\n  }\r\n\r\n  @media (min-width: ${(p) => p.theme.breakpoints.md}) {\r\n    width: 50%;\r\n    height: 50%;\r\n    border-top: 2px solid ${(p) => p.theme.white};\r\n    box-shadow: 0 2px 2px #000;\r\n\r\n    font-size: inherit;\r\n\r\n    & > *:last-child {\r\n      margin-bottom: 0;\r\n    }\r\n    & > *:first-child {\r\n      margin-top: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nconst InfoButton = styled(MdInfoOutline)`\r\n  color: inherit;\r\n  opacity: 0.5;\r\n  cursor: pointer;\r\n\r\n  height: 20vw;\r\n  width: 20vw;\r\n\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  transition: all 200ms ease;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n    border-radius: 4px;\r\n    background: ${(p) => rgba(p.theme.primary, 0.5)};\r\n  }\r\n`;\r\n","/* --------------------------------- IMPORT --------------------------------- */\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport styled from 'styled-components/macro';\r\n\r\nimport NowPlayingSlide from './NowPlayingSlide';\r\n\r\n/* --------------------------------- STYLING -------------------------------- */\r\nconst StyledSlideContent = styled.div`\r\n  display: flex;\r\n  width: ${(p) => p.width}px;\r\n  transform: translateX(-${(p) => p.translateX}px);\r\n  transition: transform 300ms ease;\r\n`;\r\n\r\n/* -------------------------------- COMPONENT ------------------------------- */\r\n// NOTE renders the container for content of the slider\r\nfunction NowPlayingSlideContent({ movies, translateX }) {\r\n  const slideContentWidth = window.innerWidth * movies.length;\r\n\r\n  return (\r\n    <StyledSlideContent width={slideContentWidth} translateX={translateX}>\r\n      {renderedMovies(movies)}\r\n    </StyledSlideContent>\r\n  );\r\n}\r\n\r\n/* --------------------------------- HELPERS -------------------------------- */\r\n// NOTE renders slides of nowplaying movies\r\nfunction renderedMovies(movies) {\r\n  return movies.map((movie) => <NowPlayingSlide key={movie.id} item={movie} />);\r\n}\r\n\r\n/* -------------------------------- VALIDATE -------------------------------- */\r\nNowPlayingSlideContent.propTypes = {\r\n  movies: PropTypes.array,\r\n  translateX: PropTypes.number,\r\n};\r\n\r\nexport default NowPlayingSlideContent;\r\n","/* --------------------------------- IMPORT --------------------------------- */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FaArrowLeft, FaArrowRight } from 'react-icons/fa';\r\nimport styled, { css, withTheme } from 'styled-components/macro';\r\nimport { rgba } from 'polished';\r\n\r\n/* --------------------------------- STYLING -------------------------------- */\r\nconst StyledArrowContainer = styled.div`\r\n  ${(p) =>\r\n    p.isLeftArrow\r\n      ? css`\r\n          left: 0;\r\n        `\r\n      : css`\r\n          right: 0;\r\n        `};\r\n\r\n  position: absolute;\r\n  top: 0;\r\n\r\n  height: 100%;\r\n  padding: 1rem;\r\n  background: ${(p) => rgba(p.theme.white, 0.1)};\r\n\r\n  transition: all 200ms ease;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  cursor: pointer;\r\n  opacity: 0.1;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\n/* -------------------------------- COMPONENT ------------------------------- */\r\n// NOTE renders left or right arrow, with background\r\nfunction Arrow({ isLeftArrow, theme, handleClick }) {\r\n  // * config the icon\r\n  const arrowConfig = {\r\n    size: 'clamp(3rem, 5vw, 5rem)',\r\n    color: theme.white,\r\n  };\r\n\r\n  return (\r\n    <StyledArrowContainer isLeftArrow={isLeftArrow} onClick={handleClick}>\r\n      {isLeftArrow ? (\r\n        <FaArrowLeft {...arrowConfig} />\r\n      ) : (\r\n        <FaArrowRight {...arrowConfig} />\r\n      )}\r\n    </StyledArrowContainer>\r\n  );\r\n}\r\n\r\n/* -------------------------------- VALIDATE -------------------------------- */\r\nArrow.propTypes = {\r\n  handleClick: PropTypes.func,\r\n  isLeftArrow: PropTypes.bool,\r\n  theme: PropTypes.shape({\r\n    white: PropTypes.any,\r\n  }),\r\n};\r\n\r\nexport default withTheme(Arrow);\r\n","/* --------------------------------- IMPORT --------------------------------- */\r\nimport React from 'react';\r\nimport styled, { css } from 'styled-components/macro';\r\nimport { rgba } from 'polished';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Flex from 'Components/container/Flex';\r\n\r\n/* --------------------------------- STYLING -------------------------------- */\r\nconst DotsContainer = styled(Flex)`\r\n  position: absolute;\r\n  top: 2rem;\r\n  left: 50%;\r\n  transform: translate(-50%, -0.5rem);\r\n\r\n  width: 100%;\r\n\r\n  overflow: auto;\r\n`;\r\n\r\nconst Dot = styled.div`\r\n  padding: ${(p) =>\r\n    p.isActive\r\n      ? css`clamp(0.5rem, 2vw, 1rem)`\r\n      : css`clamp(0.25rem, 1vw, 0.5rem)`};\r\n  background: ${(p) => (p.isActive ? p.theme.white : rgba(p.theme.white, 0.5))};\r\n\r\n  margin: clamp(0.1rem, 0.5vw, 0.5rem);\r\n  border-radius: 100%;\r\n\r\n  transition: background 150ms ease-out;\r\n\r\n  content: '';\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background: ${(p) => p.theme.white};\r\n  }\r\n`;\r\n\r\n/* -------------------------------- COMPONENT ------------------------------- */\r\n// NOTE render an indicator shows the index of which slide is playing\r\nfunction DotIndicator({ movies, activeIdx, handleDotClick }) {\r\n  return (\r\n    <DotsContainer>\r\n      {movies.map((movie, idx) => (\r\n        <Dot\r\n          key={movie.id}\r\n          isActive={idx === activeIdx}\r\n          onClick={() => handleDotClick(idx)}\r\n          title={movie.title}\r\n        />\r\n      ))}\r\n    </DotsContainer>\r\n  );\r\n}\r\n\r\n/* -------------------------------- VALIDATE -------------------------------- */\r\nDotIndicator.propTypes = {\r\n  activeIdx: PropTypes.number,\r\n  handleDotClick: PropTypes.func,\r\n  movies: PropTypes.array,\r\n};\r\n\r\nexport default DotIndicator;\r\n","/* --------------------------------- IMPORT --------------------------------- */\r\nimport React, { useReducer, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components/macro';\r\n\r\nimport NowPlayingSlideContent from './NowPlayingSlideContent';\r\nimport Arrow from './Arrow';\r\nimport DotIndicator from './DotIndicator';\r\nimport SliderContext from 'Context/SliderContext';\r\n\r\n/* --------------------------------- STYLING -------------------------------- */\r\nconst StyledSlider = styled.div`\r\n  position: relative;\r\n  overflow-x: hidden;\r\n`;\r\n\r\n/* -------------------------------- COMPONENT ------------------------------- */\r\n/**\r\n * Reducer\r\n */\r\nfunction initCurrentSlide(movies) {\r\n  return {\r\n    index: 0,\r\n    transitionValue: 0,\r\n    lastMovieIndex: movies.length - 1,\r\n  };\r\n}\r\nconst currentSlideReducer = (state, { type, payload }) => {\r\n  switch (type) {\r\n    case 'NEXT_SLIDE':\r\n      // Skip this autoplay interval\r\n      window.clearInterval(payload?.autoPlayTimer);\r\n\r\n      // Loop back to the first slide from the final slide\r\n      if (state.index === state.lastMovieIndex) {\r\n        return {\r\n          ...state,\r\n          index: 0,\r\n          transitionValue: 0,\r\n        };\r\n      }\r\n\r\n      // Go to next slide\r\n      return {\r\n        ...state,\r\n        index: state.index + 1,\r\n        transitionValue: _getTransitionValue(state.index + 1),\r\n      };\r\n\r\n    case 'PREV_SLIDE':\r\n      // Skip this autoplay interval\r\n      window.clearInterval(payload?.autoPlayTimer);\r\n\r\n      // Go to the final slide from the first slide\r\n      if (state.index === 0) {\r\n        return {\r\n          ...state,\r\n          index: state.lastMovieIndex,\r\n          transitionValue: _getTransitionValue(state.lastMovieIndex),\r\n        };\r\n      }\r\n\r\n      // Go the the previous slide\r\n      return {\r\n        ...state,\r\n        index: state.index - 1,\r\n        transitionValue: _getTransitionValue(state.index - 1),\r\n      };\r\n\r\n    case 'DOT_CLICKED':\r\n      // Skip this autoplay interval\r\n      window.clearInterval(payload.autoPlayTimer);\r\n\r\n      // Go to the selected slide\r\n      return {\r\n        ...state,\r\n        index: payload.index,\r\n        transitionValue: _getTransitionValue(payload.index),\r\n      };\r\n\r\n    case 'RESUME':\r\n      return { ...state };\r\n\r\n    // Probably action's name typo\r\n    default:\r\n      throw new Error('UNKNOWN SLIDE ACTION');\r\n  }\r\n};\r\n\r\n// NOTE renders a Slider for nowplaying movies, with content and controllers\r\nfunction NowPlayingSlider({ movies, autoPlayInMs = 3000 }) {\r\n  /**\r\n   * States\r\n   */\r\n  const [currentSlide, dispatchCurrentSlide] = useReducer(\r\n    currentSlideReducer,\r\n    movies,\r\n    initCurrentSlide\r\n  );\r\n\r\n  /**\r\n   * Refs\r\n   */\r\n  const autoPlayTimer = useRef();\r\n\r\n  /**\r\n   * side-effects\r\n   */\r\n  // Set autoplay interval on every renders\r\n  useEffect(() => {\r\n    // If autoplay is set\r\n    if (autoPlayInMs) {\r\n      // Intervally go to the next slide\r\n      autoPlayTimer.current = setInterval(() => {\r\n        // Tracking if there is memory leak\r\n        console.log('SLIDER_INTERVAL');\r\n\r\n        // Go to the next slide\r\n        dispatchCurrentSlide({ type: 'NEXT_SLIDE' });\r\n      }, autoPlayInMs);\r\n    }\r\n\r\n    // Clearing up timer\r\n    return () => {\r\n      window.clearInterval(autoPlayTimer.current);\r\n    };\r\n  });\r\n\r\n  // Closure to retain the timerId even after passing down to children\r\n  const pauseSlideShow = () => {\r\n    return () => window.clearInterval(autoPlayTimer.current);\r\n  };\r\n\r\n  const resumeSlideShow = () => {\r\n    dispatchCurrentSlide({ type: 'RESUME' });\r\n  };\r\n\r\n  return (\r\n    <SliderContext.Provider value={{ pauseSlideShow, resumeSlideShow }}>\r\n      <StyledSlider>\r\n        <NowPlayingSlideContent\r\n          movies={movies}\r\n          activeSlide={currentSlide.index}\r\n          translateX={currentSlide.transitionValue}\r\n        />\r\n\r\n        <Arrow\r\n          isLeftArrow\r\n          handleClick={() =>\r\n            dispatchCurrentSlide({\r\n              type: 'PREV_SLIDE',\r\n              payload: { autoPlayTimer: autoPlayTimer.current },\r\n            })\r\n          }\r\n        />\r\n        <Arrow\r\n          handleClick={() =>\r\n            dispatchCurrentSlide({\r\n              type: 'NEXT_SLIDE',\r\n              payload: { autoPlayTimer: autoPlayTimer.current },\r\n            })\r\n          }\r\n        />\r\n\r\n        <DotIndicator\r\n          movies={movies}\r\n          activeIdx={currentSlide.index}\r\n          handleDotClick={(index) =>\r\n            dispatchCurrentSlide({\r\n              type: 'DOT_CLICKED',\r\n              payload: { index, autoPlayTimer: autoPlayTimer.current },\r\n            })\r\n          }\r\n        />\r\n      </StyledSlider>\r\n    </SliderContext.Provider>\r\n  );\r\n}\r\n\r\n/**\r\n * Helpers\r\n */\r\n\r\n// Calc transitionValue base on window.innerWidth\r\nfunction _getTransitionValue(slideIdx) {\r\n  return slideIdx * window.innerWidth;\r\n}\r\n\r\nexport default NowPlayingSlider;\r\n","import React from 'react';\r\nexport default React.createContext('movie');\r\n","/* --------------------------------- IMPORT --------------------------------- */\r\nimport React, { useState } from 'react';\r\nimport styled from 'styled-components/macro';\r\n\r\nimport {\r\n  fetchCollection,\r\n  collectionIsLoadingSelector,\r\n  collectionsSelector,\r\n  collectionErrorSelector,\r\n} from 'Features/collectionSlice';\r\n\r\nimport NowPlayingSlider from 'Components/moviePage/nowPlayingSlider/NowPlayingSlider';\r\nimport MainLayout from 'HOC/MainLayout';\r\nimport Collection from 'Components/moviePage/Collection/Collection';\r\nimport ItemContext from 'Context/ItemContext';\r\nimport { useFetch } from 'Hooks/useFetch';\r\nimport { motion } from 'framer-motion';\r\nimport LoadingIndicator from 'Components/ui/LoadingIndicator/LoadingIndicator';\r\nimport useTitle from 'Hooks/useTitle';\r\nimport { useSelector } from 'react-redux';\r\nimport ErrorModal from 'Components/ui/ErrorModal';\r\n\r\n/* -------------------------------- COMPONENT ------------------------------- */\r\n// NOTE Render the page at /all\r\nfunction MoviePage() {\r\n  const [{ movies, tvSeries }, isLoading] = useFetch(\r\n    fetchCollection,\r\n    collectionsSelector,\r\n    collectionIsLoadingSelector\r\n  );\r\n\r\n  // Except the nowPlaying movies\r\n  const MOVIE_MENUS = extractSubCollection(movies);\r\n  // tvSeries version\r\n  const TV_MENUS = extractSubCollection(tvSeries);\r\n\r\n  // because useState won't change value after the first rener\r\n  // initial value is the first SUB_MOVIE_NAME alphabetically\r\n  const [activeMovieCollection, setActiveMovieCollection] = useState('popular');\r\n  // tvSeries version\r\n  const [activeTvCollection, setActiveTvCollection] = useState('onTheAir');\r\n\r\n  useTitle('All movies');\r\n\r\n  const error = useSelector(collectionErrorSelector);\r\n  if (error) {\r\n    return <ErrorModal>{error}</ErrorModal>;\r\n  }\r\n\r\n  return isLoading ? (\r\n    <LoadingIndicator />\r\n  ) : (\r\n    <MainLayout>\r\n      <MoviePageContainer>\r\n        <NowPlayingSlider movies={movies.nowPlaying} />\r\n\r\n        <ItemContext.Provider value=\"movie\">\r\n          <Collection\r\n            header={{\r\n              sectionName: 'Movies',\r\n              subMenuNames: MOVIE_MENUS.slice(1),\r\n              activeMenu: activeMovieCollection,\r\n              setActiveMenu: setActiveMovieCollection,\r\n            }}\r\n            collection={movies[activeMovieCollection]}\r\n          />\r\n        </ItemContext.Provider>\r\n\r\n        <ItemContext.Provider value=\"tv\">\r\n          <Collection\r\n            header={{\r\n              sectionName: 'TV Series',\r\n              subMenuNames: TV_MENUS,\r\n              activeMenu: activeTvCollection,\r\n              setActiveMenu: setActiveTvCollection,\r\n            }}\r\n            collection={tvSeries[activeTvCollection]}\r\n          />\r\n        </ItemContext.Provider>\r\n      </MoviePageContainer>\r\n    </MainLayout>\r\n  );\r\n}\r\n\r\nconst MoviePageContainer = styled(motion.div)`\r\n  display: grid;\r\n  row-gap: 2rem;\r\n`;\r\n\r\nfunction extractSubCollection(collection) {\r\n  return Object.keys(collection).sort();\r\n}\r\n\r\nexport default MoviePage;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\n\r\nexport const useFetch = (fetchAction, valueSelector, isLoadingSelector) => {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(valueSelector);\r\n  const isLoading = useSelector(isLoadingSelector);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchAction());\r\n  }, [dispatch, fetchAction]);\r\n\r\n  return [value, isLoading];\r\n};\r\n"],"sourceRoot":""}